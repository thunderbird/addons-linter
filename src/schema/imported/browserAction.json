{
  "$id": "browserAction",
  "description": "Use browser actions to put icons in the main browser toolbar, to the right of the address bar. In addition to its icon, a browser action can also have a tooltip, a badge, and a popup.",
  "permissions": [
    "manifest:action",
    "manifest:browser_action"
  ],
  "types": {
    "ActionManifest": {
      "type": "object",
      "properties": {
        "default_label": {
          "type": "string",
          "description": "The label of the action button, defaults to its title. Can be set to an empty string to not display any label. If the containing toolbar is configured to display text only, the title will be used as fallback.",
          "preprocess": "localize"
        },
        "default_title": {
          "type": "string",
          "description": "The title of the action button. This shows up in the tooltip and the label. Defaults to the add-on name.",
          "preprocess": "localize"
        },
        "default_icon": {
          "allOf": [
            {
              "$ref": "manifest#/types/IconPath"
            },
            {
              "description": "The paths to one or more icons for the action button."
            }
          ],
          "$ref": "manifest#/types/IconPath"
        },
        "theme_icons": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "manifest#/types/ThemeIcons"
          },
          "description": "Specifies icons to use for dark and light themes"
        },
        "default_popup": {
          "type": "string",
          "format": "relativeUrl",
          "description": "The html document to be opened as a popup when the user clicks on the action button.",
          "preprocess": "localize"
        },
        "browser_style": {
          "type": "boolean",
          "description": "Enable browser styles. See the `MDN documentation on browser styles <|link-mdn-browser-styles|>`__ for more information.",
          "default": false
        },
        "default_area": {
          "description": "Defines the location the browserAction will appear by default.  The default location is navbar.",
          "type": "string",
          "enum": [
            "maintoolbar",
            "tabstoolbar",
            "navbar",
            "menupanel",
            "tabstrip",
            "personaltoolbar"
          ]
        },
        "default_windows": {
          "description": "Defines the windows, the action button should appear in. Defaults to showing it only in the <value>normal</value> Thunderbird window, but can also be shown in the <value>messageDisplay</value> window.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "normal",
              "messageDisplay"
            ]
          },
          "default": [
            "normal"
          ]
        },
        "allowed_spaces": {
          "description": "Defines the spaces, in which the action button can appear in the toolbar of the normal Thunderbird window. Defaults to only allowing the action in the <value>mail</value> space. The <value>default</value> space is for tabs that don't belong to any space. If this is an empty array, the action button is shown in all spaces.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "mail",
              "addressbook",
              "calendar",
              "tasks",
              "chat",
              "settings",
              "default"
            ]
          },
          "default": [
            "mail"
          ]
        }
      }
    }
  },
  "functions": [
    {
      "name": "setTitle",
      "type": "function",
      "description": "Sets the title of the action button. Is used as tooltip and as the label.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "title": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A string the action button should display as its label and when moused over. Cleared by setting it to <value>null</value> or an empty string (title defined the manifest will be used)."
            },
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Sets the title only for the given tab."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          },
          "required": [
            "title"
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "getTitle",
      "type": "function",
      "description": "Gets the title of the action button.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Specifies for which tab the title should be retrieved. If no tab is specified, the global value is retrieved."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "name": "result",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "name": "setLabel",
      "type": "function",
      "description": "Sets the label of the action button. Can be used to set different values for the tooltip (defined by the title) and the label. Additionally, the label can be set to an empty string, not showing any label at all.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "label": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "A string the action button should use as its label, overriding the defined title. Can be set to an empty string to not display any label at all. If the containing toolbar is configured to display text only, its title will be used. Cleared by setting it to <value>null</value>."
            },
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Sets the label only for the given tab."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          },
          "required": [
            "label"
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "getLabel",
      "type": "function",
      "description": "Gets the label of the action button.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Specifies for which tab the label should be retrieved. If no tab is specified, the global label is retrieved."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "name": "result",
              "type": "string",
              "optional": true
            }
          ]
        }
      ]
    },
    {
      "name": "setIcon",
      "type": "function",
      "description": "Sets the icon for the action button. Either the ``path`` or the ``imageData`` property must be specified.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "imageData": {
              "anyOf": [
                {
                  "$ref": "#/types/ImageDataType"
                },
                {
                  "$ref": "#/types/ImageDataDictionary"
                }
              ],
              "description": "The image data for one or more icons for the action button."
            },
            "path": {
              "allOf": [
                {
                  "$ref": "manifest#/types/IconPath"
                },
                {
                  "description": "The paths to one or more icons for the action button."
                }
              ]
            },
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Sets the icon only for the given tab."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "setPopup",
      "type": "function",
      "description": "Sets the html document to be opened as a popup when the user clicks on the action button.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "popup": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The html file to show in a popup. Can be set to an empty string to not open a popup. Cleared by setting it to <value>null</value> (popup value defined the manifest will be used)."
            },
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Sets the popup only for the given tab."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          },
          "required": [
            "popup"
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "getPopup",
      "type": "function",
      "description": "Gets the html document set as the popup for this action button.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Specifies for which tab the popup document should be retrieved. If no tab is specified, the global value is retrieved."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "name": "result",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "name": "setBadgeText",
      "type": "function",
      "description": "Sets the badge text for the action button. The badge is displayed on top of the icon.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "text": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Any number of characters can be passed, but only about four can fit in the space. Cleared by setting it to <value>null</value> or an empty string."
            },
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Sets the badge text only for the given tab."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          },
          "required": [
            "text"
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "getBadgeText",
      "type": "function",
      "description": "Gets the badge text of the action button.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Specifies for which tab the badge text should be retrieved. If no tab is specified, the global label is retrieved."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "name": "result",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "name": "setBadgeBackgroundColor",
      "type": "function",
      "description": "Sets the background color for the badge.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "color": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/types/ColorArray"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The color to use as background in the badge. Cleared by setting it to <value>null</value> or an empty string."
            },
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Sets the background color for the badge only for the given tab."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          },
          "required": [
            "color"
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "getBadgeBackgroundColor",
      "type": "function",
      "description": "Gets the badge background color of the action button.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Specifies for which tab the badge background color should be retrieved. If no tab is specified, the global label is retrieved."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "allOf": [
                {
                  "$ref": "#/types/ColorArray"
                },
                {
                  "name": "result"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "enable",
      "type": "function",
      "description": "Enables the action button for a specific tab (if a ``tabId`` is provided), or for all tabs which do not have a custom enable state. Once the enable state of a tab has been updated individually, all further changes to its state have to be done individually as well. By default, an action button is enabled.",
      "async": "callback",
      "parameters": [
        {
          "type": "integer",
          "optional": true,
          "name": "tabId",
          "minimum": 0,
          "description": "The id of the tab for which you want to modify the action button."
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "disable",
      "type": "function",
      "description": "Disables the action button for a specific tab (if a ``tabId`` is provided), or for all tabs which do not have a custom enable state. Once the enable state of a tab has been updated individually, all further changes to its state have to be done individually as well.",
      "async": "callback",
      "parameters": [
        {
          "type": "integer",
          "optional": true,
          "name": "tabId",
          "minimum": 0,
          "description": "The id of the tab for which you want to modify the action button."
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "isEnabled",
      "type": "function",
      "description": "Checks whether the action button is enabled.",
      "async": "callback",
      "parameters": [
        {
          "name": "details",
          "type": "object",
          "properties": {
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "Specifies for which tab the state should be retrieved. If no tab is specified, the global value is retrieved."
            },
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "unsupported": true,
              "description": "Will throw an error if used."
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "type": "boolean"
            }
          ]
        }
      ]
    },
    {
      "name": "openPopup",
      "type": "function",
      "description": "Opens the action's popup window in the specified window. Defaults to the current window. Returns false if the popup could not be opened because the action is disabled or has been removed from the toolbar.",
      "async": "callback",
      "parameters": [
        {
          "name": "options",
          "optional": true,
          "type": "object",
          "description": "An object with information about the popup to open.",
          "properties": {
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "description": "Defaults to the current window."
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "type": "boolean"
            }
          ]
        }
      ]
    },
    {
      "name": "setTitle",
      "type": "function",
      "description": "Sets the title of the browser action. This shows up in the tooltip.",
      "async": "callback",
      "parameters": [
        {
          "$merge": {
            "source": {
              "$ref": "browserAction#/types/Details"
            },
            "with": {
              "name": "details",
              "type": "object",
              "properties": {
                "title": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The string the browser action should display when moused over."
                }
              },
              "required": [
                "title"
              ]
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "getTitle",
      "type": "function",
      "description": "Gets the title of the browser action.",
      "async": "callback",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/Details"
            },
            {
              "name": "details"
            }
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "name": "result",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "name": "setIcon",
      "type": "function",
      "description": "Sets the icon for the browser action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <b>path</b> or the <b>imageData</b> property must be specified.",
      "async": "callback",
      "parameters": [
        {
          "$merge": {
            "source": {
              "$ref": "browserAction#/types/Details"
            },
            "with": {
              "name": "details",
              "type": "object",
              "properties": {
                "imageData": {
                  "anyOf": [
                    {
                      "$ref": "#/types/ImageDataType"
                    },
                    {
                      "type": "object",
                      "patternProperties": {
                        "^[1-9]\\d*$": {
                          "$ref": "#/types/ImageDataType"
                        }
                      }
                    }
                  ],
                  "description": "Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals <code>scale</code>, then image with size <code>scale</code> * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'19': foo}'"
                },
                "path": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "patternProperties": {
                        "^[1-9]\\d*$": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "description": "Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals <code>scale</code>, then image with size <code>scale</code> * 19 will be selected. Initially only scales 1 and 2 will be supported. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.imageData = {'19': foo}'"
                }
              }
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "setPopup",
      "type": "function",
      "description": "Sets the html document to be opened as a popup when the user clicks on the browser action's icon.",
      "async": "callback",
      "parameters": [
        {
          "$merge": {
            "source": {
              "$ref": "browserAction#/types/Details"
            },
            "with": {
              "name": "details",
              "type": "object",
              "properties": {
                "popup": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The html file to show in a popup.  If set to the empty string (''), no popup is shown."
                }
              },
              "required": [
                "popup"
              ]
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "getPopup",
      "type": "function",
      "description": "Gets the html document set as the popup for this browser action.",
      "async": "callback",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/Details"
            },
            {
              "name": "details"
            }
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "name": "result",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "name": "setBadgeText",
      "type": "function",
      "description": "Sets the badge text for the browser action. The badge is displayed on top of the icon.",
      "async": "callback",
      "parameters": [
        {
          "$merge": {
            "source": {
              "$ref": "browserAction#/types/Details"
            },
            "with": {
              "name": "details",
              "type": "object",
              "properties": {
                "text": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "Any number of characters can be passed, but only about four can fit in the space."
                }
              },
              "required": [
                "text"
              ]
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "getBadgeText",
      "type": "function",
      "description": "Gets the badge text of the browser action. If no tab nor window is specified is specified, the global badge text is returned.",
      "async": "callback",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/Details"
            },
            {
              "name": "details"
            }
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "name": "result",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "name": "setBadgeBackgroundColor",
      "type": "function",
      "description": "Sets the background color for the badge.",
      "async": "callback",
      "parameters": [
        {
          "$merge": {
            "source": {
              "$ref": "browserAction#/types/Details"
            },
            "with": {
              "name": "details",
              "type": "object",
              "properties": {
                "color": {
                  "$ref": "#/types/ColorValue"
                }
              },
              "required": [
                "color"
              ]
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "getBadgeBackgroundColor",
      "type": "function",
      "description": "Gets the background color of the browser action badge.",
      "async": "callback",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/Details"
            },
            {
              "name": "details"
            }
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "allOf": [
                {
                  "$ref": "#/types/ColorArray"
                },
                {
                  "name": "result"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "setBadgeTextColor",
      "type": "function",
      "description": "Sets the text color for the badge.",
      "async": true,
      "parameters": [
        {
          "$merge": {
            "source": {
              "$ref": "browserAction#/types/Details"
            },
            "with": {
              "name": "details",
              "type": "object",
              "properties": {
                "color": {
                  "$ref": "#/types/ColorValue"
                }
              },
              "required": [
                "color"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "getBadgeTextColor",
      "type": "function",
      "description": "Gets the text color of the browser action badge.",
      "async": true,
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/Details"
            },
            {
              "name": "details"
            }
          ]
        }
      ]
    },
    {
      "name": "enable",
      "type": "function",
      "description": "Enables the browser action for a tab. By default, browser actions are enabled.",
      "async": "callback",
      "parameters": [
        {
          "type": "integer",
          "optional": true,
          "name": "tabId",
          "minimum": 0,
          "description": "The id of the tab for which you want to modify the browser action."
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "disable",
      "type": "function",
      "description": "Disables the browser action for a tab.",
      "async": "callback",
      "parameters": [
        {
          "type": "integer",
          "optional": true,
          "name": "tabId",
          "minimum": 0,
          "description": "The id of the tab for which you want to modify the browser action."
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "isEnabled",
      "type": "function",
      "description": "Checks whether the browser action is enabled.",
      "async": true,
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/Details"
            },
            {
              "name": "details"
            }
          ]
        }
      ]
    },
    {
      "name": "openPopup",
      "type": "function",
      "description": "Opens the extension popup window in the specified window.",
      "async": true,
      "parameters": [
        {
          "name": "options",
          "optional": true,
          "type": "object",
          "description": "An object with information about the popup to open.",
          "properties": {
            "windowId": {
              "type": "integer",
              "minimum": -2,
              "description": "Defaults to the $(topic:current-window)[current window]."
            }
          }
        }
      ]
    }
  ],
  "events": [
    {
      "name": "onClicked",
      "type": "function",
      "description": "Fired when an action button is clicked. This event will not fire if the action has a popup. This is a user input event handler. For asynchronous listeners some `restrictions <|link-user-input-restrictions|>`__ apply.",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "tabs#/types/Tab"
            },
            {
              "name": "tab"
            }
          ]
        },
        {
          "allOf": [
            {
              "$ref": "#/types/OnClickData"
            },
            {
              "name": "info",
              "optional": true
            }
          ]
        }
      ]
    },
    {
      "name": "onClicked",
      "type": "function",
      "description": "Fired when a browser action icon is clicked.  This event will not fire if the browser action has a popup.",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "tabs#/types/Tab"
            },
            {
              "name": "tab"
            }
          ]
        },
        {
          "allOf": [
            {
              "$ref": "#/types/OnClickData"
            },
            {
              "name": "info",
              "optional": true
            }
          ]
        }
      ]
    }
  ],
  "max_manifest_version": 2,
  "definitions": {
    "WebExtensionManifest": {
      "properties": {
        "action": {
          "allOf": [
            {
              "$ref": "#/types/ActionManifest"
            },
            {
              "min_manifest_version": 3
            },
            {
              "$ref": "#/types/ActionManifest"
            },
            {
              "min_manifest_version": 3
            }
          ]
        },
        "browser_action": {
          "allOf": [
            {
              "$ref": "#/types/ActionManifest"
            },
            {
              "max_manifest_version": 2
            },
            {
              "$ref": "#/types/ActionManifest"
            },
            {
              "max_manifest_version": 2
            }
          ]
        }
      }
    }
  },
  "refs": {
    "browserAction#/definitions/WebExtensionManifest": {
      "namespace": "manifest",
      "type": "WebExtensionManifest"
    }
  }
}
