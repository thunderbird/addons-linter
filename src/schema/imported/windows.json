{
  "$id": "windows",
  "description": "The windows API supports creating, modifying and interacting with Thunderbird windows.",
  "properties": {
    "WINDOW_ID_NONE": {
      "value": -1,
      "description": "The windowId value that represents the absence of a window."
    },
    "WINDOW_ID_CURRENT": {
      "value": -2,
      "description": "The windowId value that represents the current window."
    }
  },
  "functions": [
    {
      "name": "get",
      "type": "function",
      "description": "Gets details about a window.",
      "async": "callback",
      "parameters": [
        {
          "type": "integer",
          "name": "windowId",
          "minimum": -2
        },
        {
          "allOf": [
            {
              "$ref": "#/types/GetInfo"
            },
            {
              "name": "getInfo",
              "optional": true
            }
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "allOf": [
                {
                  "$ref": "#/types/Window"
                },
                {
                  "name": "window"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "getCurrent",
      "type": "function",
      "description": "Gets the active or topmost window.",
      "async": "callback",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/GetInfo"
            },
            {
              "name": "getInfo",
              "optional": true
            }
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "allOf": [
                {
                  "$ref": "#/types/Window"
                },
                {
                  "name": "window"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "getLastFocused",
      "type": "function",
      "description": "Gets the window that was most recently focused &mdash; typically the window 'on top'.",
      "async": "callback",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/GetInfo"
            },
            {
              "name": "getInfo",
              "optional": true
            }
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "allOf": [
                {
                  "$ref": "#/types/Window"
                },
                {
                  "name": "window"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "getAll",
      "type": "function",
      "description": "Gets all windows.",
      "async": "callback",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/GetInfo"
            },
            {
              "name": "getInfo",
              "optional": true
            }
          ]
        },
        {
          "type": "function",
          "name": "callback",
          "parameters": [
            {
              "name": "windows",
              "type": "array",
              "items": {
                "$ref": "#/types/Window"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "create",
      "type": "function",
      "description": "Creates (opens) a new window with any optional sizing, position or default URL provided. When loading a page into a popup window, same-site links are opened within the same window, all other links are opened in the user's default browser. To override this behavior, add-ons have to register a `content script <https://bugzilla.mozilla.org/show_bug.cgi?id=1618828#c3>`__ , capture click events and handle them manually. Same-site links with targets other than <value>_self</value> are opened in a new tab in the most recent ``normal`` Thunderbird window.",
      "async": "callback",
      "parameters": [
        {
          "type": "object",
          "name": "createData",
          "optional": true,
          "default": {},
          "properties": {
            "url": {
              "description": "A URL or array of URLs to open as tabs in the window. Fully-qualified URLs must include a scheme (i.e. <value>http://www.google.com</value>, not <value>www.google.com</value>). Relative URLs will be relative to the current page within the extension. Defaults to the New Tab Page.",
              "anyOf": [
                {
                  "type": "string",
                  "format": "relativeUrl"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "relativeUrl"
                  }
                }
              ]
            },
            "tabId": {
              "type": "integer",
              "minimum": 0,
              "description": "The id of the tab for which you want to adopt to the new window."
            },
            "left": {
              "type": "integer",
              "description": "The number of pixels to position the new window from the left edge of the screen. If not specified, the new window is offset naturally from the last focused window."
            },
            "top": {
              "type": "integer",
              "description": "The number of pixels to position the new window from the top edge of the screen. If not specified, the new window is offset naturally from the last focused window."
            },
            "width": {
              "type": "integer",
              "minimum": 0,
              "description": "The width in pixels of the new window, including the frame. If not specified defaults to a natural width."
            },
            "height": {
              "type": "integer",
              "minimum": 0,
              "description": "The height in pixels of the new window, including the frame. If not specified defaults to a natural height."
            },
            "focused": {
              "unsupported": true,
              "type": "boolean",
              "description": "If true, opens an active window. If false, opens an inactive window."
            },
            "incognito": {
              "unsupported": true,
              "type": "boolean"
            },
            "type": {
              "allOf": [
                {
                  "$ref": "#/types/CreateType"
                },
                {
                  "description": "Specifies what type of window to create. Thunderbird does not support <value>panel</value> and <value>detached_panel</value>, they are interpreted as <value>popup</value>."
                }
              ]
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/types/WindowState"
                },
                {
                  "description": "The initial state of the window. The ``minimized``, ``maximized`` and ``fullscreen`` states cannot be combined with ``left``, ``top``, ``width`` or ``height``."
                }
              ]
            },
            "allowScriptsToClose": {
              "type": "boolean",
              "description": "Allow scripts running inside the window to close the window by calling <code>window.close()</code>."
            },
            "titlePreface": {
              "type": "string",
              "description": "A string to add to the beginning of the window title."
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "allOf": [
                {
                  "$ref": "#/types/Window"
                },
                {
                  "name": "window",
                  "description": "Contains details about the created window.",
                  "optional": true
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "update",
      "type": "function",
      "description": "Updates the properties of a window. Specify only the properties that you want to change; unspecified properties will be left unchanged.",
      "async": "callback",
      "parameters": [
        {
          "type": "integer",
          "name": "windowId",
          "minimum": -2
        },
        {
          "type": "object",
          "name": "updateInfo",
          "properties": {
            "left": {
              "type": "integer",
              "description": "The offset from the left edge of the screen to move the window to in pixels. This value is ignored for panels."
            },
            "top": {
              "type": "integer",
              "description": "The offset from the top edge of the screen to move the window to in pixels. This value is ignored for panels."
            },
            "width": {
              "type": "integer",
              "minimum": 0,
              "description": "The width to resize the window to in pixels."
            },
            "height": {
              "type": "integer",
              "minimum": 0,
              "description": "The height to resize the window to in pixels."
            },
            "focused": {
              "type": "boolean",
              "description": "If true, brings the window to the front. If false, brings the next window in the z-order to the front."
            },
            "drawAttention": {
              "type": "boolean",
              "description": "Setting this to <value>true</value> will cause the window to be displayed in a manner that draws the user's attention to the window, without changing the focused window. The effect lasts until the user changes focus to the window. This option has no effect if the window already has focus."
            },
            "state": {
              "allOf": [
                {
                  "$ref": "#/types/WindowState"
                },
                {
                  "description": "The new state of the window. The ``minimized``, ``maximized`` and ``fullscreen`` states cannot be combined with ``left``, ``top``, ``width`` or ``height``."
                }
              ]
            },
            "titlePreface": {
              "type": "string",
              "description": "A string to add to the beginning of the window title."
            }
          }
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "allOf": [
                {
                  "$ref": "#/types/Window"
                },
                {
                  "name": "window"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "remove",
      "type": "function",
      "description": "Removes (closes) a window, and all the tabs inside it.",
      "async": "callback",
      "parameters": [
        {
          "type": "integer",
          "name": "windowId",
          "minimum": -2
        },
        {
          "type": "function",
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      ]
    },
    {
      "name": "openDefaultBrowser",
      "type": "function",
      "description": "Opens the provided URL in the default system browser.",
      "async": true,
      "parameters": [
        {
          "type": "string",
          "name": "url"
        }
      ]
    }
  ],
  "events": [
    {
      "name": "onCreated",
      "type": "function",
      "description": "Fired when a window is created.",
      "filters": [
        {
          "name": "windowTypes",
          "type": "array",
          "items": {
            "$ref": "#/types/WindowType"
          },
          "description": "Conditions that the window's type being created must satisfy. By default it will satisfy <value>['app', 'normal', 'panel', 'popup']</value>, with <value>app</value> and <value>panel</value> window types limited to the extension's own windows."
        }
      ],
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/Window"
            },
            {
              "name": "window",
              "description": "Details of the window that was created."
            }
          ]
        }
      ]
    },
    {
      "name": "onRemoved",
      "type": "function",
      "description": "Fired when a window is removed (closed).",
      "filters": [
        {
          "name": "windowTypes",
          "type": "array",
          "items": {
            "$ref": "#/types/WindowType"
          },
          "description": "Conditions that the window's type being removed must satisfy. By default it will satisfy <value>['app', 'normal', 'panel', 'popup']</value>, with <value>app</value> and <value>panel</value> window types limited to the extension's own windows."
        }
      ],
      "parameters": [
        {
          "type": "integer",
          "name": "windowId",
          "minimum": 0,
          "description": "ID of the removed window."
        }
      ]
    },
    {
      "name": "onFocusChanged",
      "type": "function",
      "description": "Fired when the currently focused window changes. Will be :ref:`windows.WINDOW_ID_NONE`, if all windows have lost focus. **Note:** On some Linux window managers, WINDOW_ID_NONE will always be sent immediately preceding a switch from one window to another.",
      "filters": [
        {
          "name": "windowTypes",
          "type": "array",
          "items": {
            "$ref": "#/types/WindowType"
          },
          "description": "Conditions that the window's type being focused must satisfy. By default it will satisfy <value>['app', 'normal', 'panel', 'popup']</value>, with <value>app</value> and <value>panel</value> window types limited to the extension's own windows."
        }
      ],
      "parameters": [
        {
          "type": "integer",
          "name": "windowId",
          "minimum": -1,
          "description": "ID of the newly focused window."
        }
      ]
    }
  ],
  "definitions": {},
  "refs": {},
  "types": {
    "WindowType": {
      "type": "string",
      "description": "The type of a window. Under some circumstances a window may not be assigned a type property.",
      "enum": [
        "normal",
        "popup",
        "panel",
        "app",
        "devtools",
        "messageCompose",
        "messageDisplay"
      ]
    },
    "WindowState": {
      "type": "string",
      "description": "The state of this window.",
      "enum": [
        "normal",
        "minimized",
        "maximized",
        "fullscreen",
        "docked"
      ]
    },
    "Window": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "minimum": 0,
          "description": "The ID of the window. Window IDs are unique within a session."
        },
        "focused": {
          "type": "boolean",
          "description": "Whether the window is currently the focused window."
        },
        "top": {
          "type": "integer",
          "description": "The offset of the window from the top edge of the screen in pixels."
        },
        "left": {
          "type": "integer",
          "description": "The offset of the window from the left edge of the screen in pixels."
        },
        "width": {
          "type": "integer",
          "description": "The width of the window, including the frame, in pixels."
        },
        "height": {
          "type": "integer",
          "description": "The height of the window, including the frame, in pixels."
        },
        "tabs": {
          "type": "array",
          "items": {
            "$ref": "tabs#/types/Tab"
          },
          "description": "Array of :ref:`tabs.Tab` objects representing the current tabs in the window. Only included if requested by :ref:`windows.get`, :ref:`windows.getCurrent`, :ref:`windows.getAll` or :ref:`windows.getLastFocused`, and the optional :ref:`windows.GetInfo` parameter has its ``populate`` member set to <value>true</value>."
        },
        "incognito": {
          "type": "boolean",
          "description": "Whether the window is incognito. Since Thunderbird does not support the incognito mode, this is always <value>false</value>."
        },
        "type": {
          "allOf": [
            {
              "$ref": "#/types/WindowType"
            },
            {
              "description": "The type of window this is."
            }
          ]
        },
        "state": {
          "allOf": [
            {
              "$ref": "#/types/WindowState"
            },
            {
              "description": "The state of this window."
            }
          ]
        },
        "alwaysOnTop": {
          "type": "boolean",
          "description": "Whether the window is set to be always on top."
        },
        "title": {
          "type": "string",
          "description": "The title of the window. Read-only."
        }
      },
      "required": [
        "focused",
        "incognito",
        "alwaysOnTop"
      ]
    },
    "CreateType": {
      "type": "string",
      "description": "Specifies what type of window to create. Thunderbird does not support <value>panel</value> and <value>detached_panel</value>, they are interpreted as <value>popup</value>.",
      "enum": [
        "normal",
        "popup",
        "panel",
        "detached_panel"
      ]
    },
    "GetInfo": {
      "type": "object",
      "description": "Specifies additional requirements for the returned windows.",
      "properties": {
        "populate": {
          "type": "boolean",
          "description": "If true, the :ref:`windows.Window` returned will have a ``tabs`` property that contains an array of :ref:`tabs.Tab` objects representing the tabs inside the window. The :ref:`tabs.Tab` objects only contain the ``url``, ``title`` and ``favIconUrl`` properties if the extension's manifest file includes the <permission>tabs</permission> permission."
        },
        "windowTypes": {
          "type": "array",
          "items": {
            "$ref": "#/types/WindowType"
          },
          "description": "If set, the :ref:`windows.Window` returned will be filtered based on its type. Supported by :ref:`windows.getAll` only, ignored in all other functions."
        }
      }
    }
  }
}
